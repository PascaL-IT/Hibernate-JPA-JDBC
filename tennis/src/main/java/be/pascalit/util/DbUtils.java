package be.pascalit.util;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

public class DbUtils {

	private DbUtils() {}
	
	public static void printMetadatas(ResultSet rs) throws SQLException {
		ResultSetMetaData rsm = rs.getMetaData();
		System.out.println("Metadatas for this result set: " + rsm.getColumnCount());
		for (int c = 1; c <= rsm.getColumnCount(); c++) {
			System.out.println("ResultSetMetaData[" + c + "] : catalog=" + rsm.getCatalogName(c) + " - schema name= "
					+ rsm.getSchemaName(c));
			System.out.println("ResultSetMetaData[" + c + "] : table name= " + rsm.getTableName(c) + " - precision= "
					+ rsm.getPrecision(c) + " - scale= " + rsm.getScale(c));
			System.out.println("ResultSetMetaData[" + c + "] : column class=" + rsm.getColumnClassName(c)
					+ " - display size=" + rsm.getColumnDisplaySize(c));
			System.out.println("ResultSetMetaData[" + c + "] : column label=" + rsm.getColumnLabel(c) + " - name="
					+ rsm.getColumnName(c));
			System.out.println("ResultSetMetaData[" + c + "] : column type name= " + rsm.getColumnTypeName(c)
					+ " - type=" + rsm.getColumnType(c));
		}
	}

	public static String getMetadataLabel(ResultSetMetaData rsm, int index) throws SQLException {
		if (rsm.getColumnCount() >= index) {
			return rsm.getColumnLabel(index);
		}
		return "NA"; // not available
	}
	
	public static long getNumberOfRows(String table, Connection conn) throws SQLException {
		Statement statement = conn.createStatement();
		long numberOfRows = 0L;
		ResultSet rs = statement.executeQuery("select count(1) from " + table);
		if (rs.next()) {
			numberOfRows = rs.getLong(1);
		} else {
			throw new SQLException("Cannot retrieve number of rows for table '"+table+"'");
		}
		return numberOfRows;
	}
	
	public static void printDebugKeys(ResultSet keys) throws SQLException {
		System.out.println("Autogenerated keys are: ");
		// System.out.println("Key: nbr. of rows = " + keys.getRow());
		while (keys.next()) {
			System.out.println("Key: " + keys.toString());
		}
		keys.beforeFirst(); // move cursor back to the front
	}
	
}
